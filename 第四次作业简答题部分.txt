第四次作业简答题部分：

第一题

@RestController 用于注解一个类，被注解的类将被理解成一个返回ResponseBody的控制器

该注解等效于 @ResponseBody + @Controller

被该注解注解的类的@Mapping方法不会返回模型，而只是返回Responsebody(字符串)



@PathVariable 用于标注一个类方法的形参，其必须具有name属性，且该方法必须用一种映射地址注解

并且注解地址中必须含有PathVariable中设定的name属性的{name}(取值)部分， 被标注的形参的值将自动获取为

注解地址中的取值部分。



@RequestBody 该注解用于注解一个类方法的形参, 被注解的形参将用于接收前端的请求体部分

Get方法没有请求体，所以使用这个方法无效，但是语法上不算错误

请求体的部分是String 类型，所以被注解为请求体的变量一定要可以和String类型互相转换

否则将产生内部错误



@ResposeBody 该注解用于注解一个类方法，表明该方法返回响应体（String类型）

但是在语法正确性上，即使不返回String类型，但是实际运行的时候会报错（或者已经引入的java外部依赖库中

至少含有一种从String 强制转换/自动转换/转换方法）所以最好老老实实的返回String


实例：form表单post请求以后 RequestBody的内容：

name=12323&age=123123&email=12323 （可以看到就是参数的键值对）




@SessionAttribute
SessionAtrribute 只能用于注解参数，被注解的参数将会被理解成从session中获取的同名键对应的值

可以通过设置 name="name" 来指定具体是session中的哪一个键值对 




@ModelAtrribute 注解：
该注解用于注解一个参数，被注解的参数将被理解成从form表单中提交上来的数据

使用name="name"来具体的指定是请求中的哪一个参数


第二题

DispatcherServlet处理一个请求的过程：

第一步 servlet将request 当做一个参数寻找可以

被绑定该参数的元素


第二步 语言环境解析程序绑定请求，以便进程中的

元素解析处理请求时使用区域设置，当然这一步是可选的

可以不使用语言环境解析程序


第三步 主题解析器绑定请求，使视图元素可以确定

使用哪一个主题，如果没有使用主题，该步可以忽略


第四步 多部分文件处理（上传文件专用）

如果指定了多部分文件解析程序，那么该解析程序会检查

请求是否具有该属性，如果检查到了，则将其包装到

multipartttpservletRequest中以便其他解析器提供

进一步处理

第五步 寻找适当的（handler） 处理程序

找到后，执行相关控制链（拦截器中的预处理

和后处理 以及控制器），并且根据请求类型和

注解（@ResponseBody）准备相关的模型 或

其他资源用于响应的返回


这样的话，并非每一个请求都会获得一个视图

比如用@ResponseBody 进行了注解的Mapping方法



第三题

既然是对比，那就主要对比其不同的

第一部分 从总体来看

第一点 从直观上来看，structII 要比Spring MVC 简单的多

复杂的不一定是最好的，虽然复杂的可能更加规范，系统，在做大的项目的时候更好，

但是做小的项目的时候可能会显得比较笨重，有一种大炮打蚊子的感觉，所以我觉得

structII 可能更适合做小型项目，而对于什么分布式之类的很庞大的体系，使用springMVC

能更好的满足其需求


第二点，从第一点进一步看，为了减少开发成本，提高可读性等问题，

对于大框架Spring MVC , 其中自动配置并隐藏了许多模块和部分，开发者实际可见的模块其实比较少，

这样有利于提高开发效率，提高可读性，但是会减少开发人员对工程的掌控程度和权限，springmvc可能

没有那么多复杂的模块，可能功能上更简陋一些，但是其中更多部分的代码都是可见的，开发人员对项目的

掌控程度可能就更高一些。


第二部分 从模型结构来看

第三点，spring mvc 只有一个servlet即dispatcher  然后使用请求解析器解析后，

	不同的请求是通过不同的调度器完成的

        而structII 则是有多个servlet直接对应不同的请求路径（虽然说一个servlet可以对应多个路径，但是一般也会使用多个servlet）

	servlet本身就可以处理多并发，因此使用多个servlet会浪费资源，而使用一个servlet就不会浪费这个多并发的属性

	（但是，spring mvc 会不会因为servlet太少而导致服务器负载变小？ 我觉得不会的，structII虽然有多个servlet，

	但是由于servlet对应的映射地址是互相不能重叠的，所以如果同时请求一个地址的话，structII会发生一个servlet被挤爆

	而其他servlet围观（还会占用内存和CPU资源）的情况，这样其实对于多个同一请求地址的话，structII本质上也只有一个

	servlet 而且其他servlet还占用资源，这样它是比不过spring mvc 的 单servlet的， 同时，如果是多个不同地址请求

	springmvc 是一个serlvet处理，但是其占据了所有可用的CPU和内存资源，而structII 是多个servlet, 但是CPU资源

	还是那么多，而且多个servlet内存开销也更大，所以好像也是spring mvc更好一点）

	综括号中所述，spring mvc 在处理请求中，使用但serlvet模式更好


第四点，spring mvc 对于请求和视图都有解析器，可以预先对他们进行处理

	也可以这么说，spring mvc 中的视图和请求解析器是独立的模块

	而structII 没有（当然你可以自己编写，不过那样耦合度更高），这样看来

	spring mvc 的模块化更好，因为耦合度更低，内聚度也更高

	其实仔细看看，spring mvc 和 structII 的总体功能和结构都是差不多的

	不过spring mvc 的模块的多

第五点，spring mvc 由于总体模块更多，同时要保证开发效率的话，重点让开发者关注的模块肯定不会太多

	这样可以提高开发效率


第三部分 从编程角度来看

第六点, spring 可以在不使用请求转发的情况下，对于同一请求返回不同的视图view

	同时对于视图view 其可以在不同请求中返回，这都是视图解析器的功劳，

	这样可以更加灵活的关联请求和视图，而struct II 除非通过重定向或请求转发，

	否则视图模型和请求地址是一一对应的

第七点，spring 中 mapping方法的参数是按需求分配的，程序会根据你需要的参数数量和类型

	自动化的为你提供（同时你可以通过增加注解的方式，进一步具体的说明这些参数的来源和

	构造方法），不像servlet中必须提供固定的参数，这样更加灵活，同时更加高效（可以减少

	无用参数传递）


第四部分 分而后合之后的观点

第八点，讲了半天，似乎一直在吹spring mvc， 但是在我的观点中，世界上没有任何一种东西

	是永远的真理，或者永远适用的东西，spring mvc 虽然看似功能强大，但是也存在很多弱点

	比如注解式编程使用虽然简单，但是想要理解还是要花点功夫，包括按需求分配参数，

	虽然灵活，但是很容易让人摸不着头脑等等，顾此失彼，这是宇宙中的基本法则，因此，我认为

	这两种模型没有优劣而言，只有某一种情况下哪一种模型更适合。因此，我认为，我么在面对

	新技术时，应该避免盲从和自闭，要看清它的弱点和优势，只有知己知彼，才能百战百胜。


	





	















